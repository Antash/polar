#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

begin; require 'types.pb'; rescue LoadError; end

module PolarData
  # forward declarations
  class PbSportInfo < ::ProtocolBuffers::Message; end
  class PbActivityInfo < ::ProtocolBuffers::Message; end
  class PbInActivityTriggerInfo < ::ProtocolBuffers::Message; end
  class PbInActivityNonWearTriggerInfo < ::ProtocolBuffers::Message; end
  class PbActivitySamples < ::ProtocolBuffers::Message; end

  class PbSportInfo < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbSportInfo"

    required :float, :factor, 1
    required ::PbLocalDateTime, :time_stamp, 2
    optional :uint64, :sport_profile_id, 3
  end

  class PbActivityInfo < ::ProtocolBuffers::Message
    # forward declarations

    # enums
    module ActivityClass
      include ::ProtocolBuffers::Enum

      set_fully_qualified_name "polar_data.PbActivityInfo.ActivityClass"

      SLEEP = 1
      SEDENTARY = 2
      LIGHT = 3
      CONTINUOUS_MODERATE = 4
      INTERMITTENT_MODERATE = 5
      CONTINUOUS_VIGOROUS = 6
      INTERMITTENT_VIGOROUS = 7
      NON_WEAR = 8
    end

    set_fully_qualified_name "polar_data.PbActivityInfo"

    required ::PolarData::PbActivityInfo::ActivityClass, :value, 1
    required ::PbLocalDateTime, :time_stamp, 2
    optional :float, :factor, 3
  end

  class PbInActivityTriggerInfo < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbInActivityTriggerInfo"

    required ::PbLocalDateTime, :time_stamp, 1
  end

  class PbInActivityNonWearTriggerInfo < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbInActivityNonWearTriggerInfo"

    required ::PbLocalDateTime, :start_time_stamp, 1
    required ::PbLocalDateTime, :end_time_stamp, 2
  end

  class PbActivitySamples < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbActivitySamples"

    required ::PbLocalDateTime, :start_time, 1
    required ::PbDuration, :met_recording_interval, 2
    required ::PbDuration, :steps_recording_interval, 3
    repeated :float, :met_samples, 4
    repeated :uint32, :steps_samples, 5, :packed => true 
    repeated ::PolarData::PbSportInfo, :sport_info, 6
    repeated ::PolarData::PbActivityInfo, :activity_info, 7
    repeated ::PolarData::PbInActivityTriggerInfo, :inactivity_trigger, 8
    repeated ::PolarData::PbInActivityNonWearTriggerInfo, :inactivity_non_wear_trigger, 9
  end

end
