#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

begin; require 'types.pb'; rescue LoadError; end
begin; require 'structures.pb'; rescue LoadError; end

module PolarData
  # forward declarations
  class PbSwimmingStyleStatistics < ::ProtocolBuffers::Message; end
  class PbSwimmingStatistics < ::ProtocolBuffers::Message; end
  class PbHeartRateStatistics < ::ProtocolBuffers::Message; end
  class PbSpeedStatistics < ::ProtocolBuffers::Message; end
  class PbCadenceStatistics < ::ProtocolBuffers::Message; end
  class PbAltitudeStatistics < ::ProtocolBuffers::Message; end
  class PbPowerStatistics < ::ProtocolBuffers::Message; end
  class PbCyclingEfficiencyStatistics < ::ProtocolBuffers::Message; end
  class PbPedalingEfficiencyStatistics < ::ProtocolBuffers::Message; end
  class PbLRBalanceStatistics < ::ProtocolBuffers::Message; end
  class PbTemperatureStatistics < ::ProtocolBuffers::Message; end
  class PbStrideLengthStatistics < ::ProtocolBuffers::Message; end
  class PbInclineStatistics < ::ProtocolBuffers::Message; end
  class PbDeclineStatistics < ::ProtocolBuffers::Message; end
  class PbActivityStatistics < ::ProtocolBuffers::Message; end
  class PbExerciseStatistics < ::ProtocolBuffers::Message; end

  class PbSwimmingStyleStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbSwimmingStyleStatistics"

    required :float, :distance, 1
    required :uint32, :stroke_count, 2
    optional ::PbDuration, :swimming_time_total, 3
    optional :uint32, :average_heartrate, 4
    optional :uint32, :maximum_heartrate, 5
    optional :float, :average_swolf, 6
    optional ::PbDuration, :pool_time_min, 7
  end

  class PbSwimmingStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbSwimmingStatistics"

    required :float, :swimming_distance, 1
    optional ::PolarData::PbSwimmingStyleStatistics, :freestyle_statistics, 2
    optional ::PolarData::PbSwimmingStyleStatistics, :backstroke_statistics, 3
    optional ::PolarData::PbSwimmingStyleStatistics, :breaststroke_statistics, 4
    optional ::PolarData::PbSwimmingStyleStatistics, :butterfly_statistics, 5
    optional :uint32, :total_stroke_count, 6
    optional :uint32, :number_of_pools_swimmed, 7
    optional ::PbSwimmingPoolInfo, :swimming_pool, 8
  end

  class PbHeartRateStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbHeartRateStatistics"

    optional :uint32, :minimum, 1
    optional :uint32, :average, 2
    optional :uint32, :maximum, 3
  end

  class PbSpeedStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbSpeedStatistics"

    optional :float, :average, 1
    optional :float, :maximum, 2
  end

  class PbCadenceStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbCadenceStatistics"

    optional :uint32, :average, 1
    optional :uint32, :maximum, 2
  end

  class PbAltitudeStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbAltitudeStatistics"

    optional :float, :minimum, 1
    optional :float, :average, 2
    optional :float, :maximum, 3
  end

  class PbPowerStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbPowerStatistics"

    optional :int32, :average, 1
    optional :int32, :maximum, 2
  end

  class PbCyclingEfficiencyStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbCyclingEfficiencyStatistics"

    optional :uint32, :average, 1
  end

  class PbPedalingEfficiencyStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbPedalingEfficiencyStatistics"

    optional :uint32, :average, 1
  end

  class PbLRBalanceStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbLRBalanceStatistics"

    optional :float, :average, 1
  end

  class PbTemperatureStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbTemperatureStatistics"

    optional :float, :minimum, 1
    optional :float, :average, 2
    optional :float, :maximum, 3
  end

  class PbStrideLengthStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbStrideLengthStatistics"

    optional :uint32, :average, 1
    optional :uint32, :maximum, 2
  end

  class PbInclineStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbInclineStatistics"

    optional :float, :average, 1
    optional :float, :maximum, 2
  end

  class PbDeclineStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbDeclineStatistics"

    optional :float, :average, 1
    optional :float, :maximum, 2
  end

  class PbActivityStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbActivityStatistics"

    optional :float, :average, 1
  end

  class PbExerciseStatistics < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbExerciseStatistics"

    optional ::PolarData::PbHeartRateStatistics, :heart_rate, 1
    optional ::PolarData::PbSpeedStatistics, :speed, 2
    optional ::PolarData::PbCadenceStatistics, :cadence, 3
    optional ::PolarData::PbAltitudeStatistics, :altitude, 4
    optional ::PolarData::PbPowerStatistics, :power, 5
    optional ::PolarData::PbLRBalanceStatistics, :left_right_balance, 6
    optional ::PolarData::PbTemperatureStatistics, :temperature, 7
    optional ::PolarData::PbActivityStatistics, :activity, 8
    optional ::PolarData::PbStrideLengthStatistics, :stride_length, 9
    optional ::PolarData::PbInclineStatistics, :incline, 10
    optional ::PolarData::PbDeclineStatistics, :decline, 11
    optional ::PolarData::PbSwimmingStatistics, :swimming, 12
  end

end
